<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MarisaMagic&#39;s Blog 博客模板</title>
    <link href="/2024/12/13/hello-world/"/>
    <url>/2024/12/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/12/14/aIoRrziVb8TJMFW.png" alt=""></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><script type="math/tex; mode=display">P(A_i \mid B) = \frac{P(B\mid A)P(A_i)}{\sum_{j=1}^{n}P(A_j)P(B \mid A_j)}</script><script type="math/tex; mode=display">\begin{equation}  \text{sign}(x)=\begin{cases}        -1 & \text{if $x<0$},\\        0 & \text{if $x=0$},\\        1 & \text{if $x>0$}.       \end{cases}\end{equation}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*        MarisaMagic        */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span>&#123;<br>    <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>; x = <span class="hljs-number">0</span>; <span class="hljs-type">char</span> s = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (s &lt; <span class="hljs-string">&#x27;0&#x27;</span> || s &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; s = <span class="hljs-built_in">getchar</span>(); &#125;<br>    <span class="hljs-keyword">while</span> (s &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s &gt;= <span class="hljs-string">&#x27;0&#x27;</span>) x = x * <span class="hljs-number">10</span> + (s ^ <span class="hljs-number">48</span>), s = <span class="hljs-built_in">getchar</span>();<br>    x *= f;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)&#123; <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>); x = -x; &#125;<br>    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">9</span>) <span class="hljs-built_in">print</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">sread</span><span class="hljs-params">(string &amp;s)</span></span>&#123;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(ch == <span class="hljs-string">&#x27; &#x27;</span> || ch == <span class="hljs-string">&#x27;\n&#x27;</span> || ch == <span class="hljs-string">&#x27;\t&#x27;</span>) ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(ch != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\t&#x27;</span>) s += ch, ch = <span class="hljs-built_in">getchar</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">sprint</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;s)</span></span>&#123; <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;ch : s) <span class="hljs-built_in">putchar</span>(ch); &#125;<br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> pii = pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;;<br><span class="hljs-keyword">using</span> pll = pair&lt;ll, ll&gt;;<br><span class="hljs-keyword">using</span> pdd = pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pf push_front</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> qb pop_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> qf pop_front</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LB lower_bound</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UB upper_bound</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> umap unordered_map</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uset unordered_set</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pque priority_queue</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(a) begin(a), end(a)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rall(a) rbegin(a), rend(a)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mst(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mcp(a, b) memcpy(a, b, sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lowbit(x) x &amp; (-x)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ios ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">bitcnt</span><span class="hljs-params">(ll x)</span> </span>&#123;<span class="hljs-type">int</span> res = <span class="hljs-number">0</span>; <span class="hljs-keyword">while</span>(x) x = x &amp; (x - <span class="hljs-number">1</span>), res ++ ; <span class="hljs-keyword">return</span> res;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qmi</span><span class="hljs-params">(ll a, ll b, <span class="hljs-type">int</span> p)</span> </span>&#123;ll res = <span class="hljs-number">1</span>; a %= p; <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) res = (res * a) % p; b &gt;&gt;= <span class="hljs-number">1</span>, a = (a * a) % p;&#125; <span class="hljs-keyword">return</span> res;&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = (N &lt;&lt; <span class="hljs-number">1</span>);<br><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">marisa</span><span class="hljs-params">()</span></span>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios;<br><br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>; <span class="hljs-comment">//cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span>(T -- ) <span class="hljs-built_in">marisa</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
